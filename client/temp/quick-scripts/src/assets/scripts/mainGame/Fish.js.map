{"version":3,"sources":["assets/scripts/mainGame/Fish.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import Utils from \"../Utils\";\nimport MyGlobal from \"../MyGlobal\";\nimport {FishType} from \"../Interface\";\nimport Bullet from \"./Bullet\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Fish extends cc.Component {\n\n    // 上一次的位置\n    lastPos: cc.Vec2 = null;\n\n    // 鱼的生命值\n    hp: number = 0;\n\n    // 鱼的状态\n    isLive: boolean = true;\n\n    // 动画组件\n    anim: cc.Animation = null;\n\n    // 鱼的类型属性\n    fishType: FishType = null;\n\n    /**\n     * 格式化节点\n     * @param x x轴位置\n     * @param y y轴位置\n     * @param fishType 鱼的类型\n     */\n    public init(x: number, y: number, fishType: FishType): void {\n        this.node.getComponent(cc.Sprite).spriteFrame = MyGlobal.GameManager.fishAtlas.getSpriteFrame(\"fishMove_\" + fishType.name + \"_01\")\n        this.fishType = fishType;\n        this.isLive = true;\n        // 初始化鱼的血量\n        this.hp = fishType.hp;\n        // 设置碰撞盒子的大小\n        this.getComponent(cc.BoxCollider).size = this.node.getContentSize();\n        const v2: cc.Vec2 = cc.v2(x, y)\n        this.node.setPosition(v2);\n        this.lastPos = v2;\n        this.anim = this.node.getComponent(cc.Animation);\n        this.anim.play('fishMove' + fishType.name);\n        // 随机游动时长\n        const rmdTime: number = Math.random() * 10 + 8;\n        // 随机贝塞尔曲线\n        const rmdBezier: cc.Vec2[] = Utils.bezierArray[Math.floor(Math.random() * Utils.bezierArray.length)];\n        // 停止上次正在运行的动作列表\n        this.node.stopAllActions();\n        cc.tween(this.node)\n            .stop()\n            .then(cc.bezierBy(rmdTime, rmdBezier))\n            .start();\n    }\n\n    /**\n     * 碰撞检测\n     * @param other 其他碰撞组件\n     * @param self 当前碰撞组件\n     */\n    private onCollisionEnter(other: cc.Collider, self: cc.Collider): void {\n        // 如果鱼已经死亡，则不再检测碰撞\n        if (!this.isLive) return;\n        const hurt = other.node.getComponent(Bullet).getHurt();\n        this.hp -= hurt;\n        if (this.hp <= 0) {\n            this.isLive = false;\n            // 停止移动\n            this.node.stopAllActions();\n\n            console.log(this.node.getPosition())\n            MyGlobal.GameManager.createCoinUp(this.node.getPosition());\n\n            this.anim.play('fishDead' + this.fishType.name);\n            this.anim.on('finished', e => {\n                console.log('死亡动画结束');\n                Utils.putPoolNode(this.node, MyGlobal.GameManager.fishPool);\n            })\n        }\n    }\n\n    public update(dt: number): void {\n        const curPos: cc.Vec2 = this.node.getPosition();\n        // 如果两次位置的距离小于1，则不做任何操作\n        if (curPos.sub(this.lastPos).mag() < 1) return;\n        const x = curPos.x - this.lastPos.x;\n        const y = curPos.y - this.lastPos.y;\n        // const radian = Math.atan2(y, x)\n        // this.node.angle = cc.misc.radiansToDegrees(radian) - 90;\n\n        // console.log(Math.atan(y / x), radian)\n\n        // Math.atan(y/ x) // 原始角度，所以要-90\n        this.node.angle = cc.misc.radiansToDegrees(Math.atan(y / x)) - 90;\n        this.lastPos = curPos;\n        // if (this.node.x > (cc.winSize.width / 2 + 100)) this.node.destroy();\n        // console.log(-cc.misc.radiansToDegrees(radian),cc.misc.radiansToDegrees(Math.atan(y/ x))-90)\n        // this.node.angle = cc.misc.radiansToDegrees(Math.atan(y/ x))-90;\n\n\n        const offsetWidth: number = this.node.width / 2 + 50;\n        const offsetHeight: number = this.node.height / 2 + 50;\n        // 超出边界移除\n        if (this.node.x > (cc.winSize.width / 2 + offsetWidth) || (this.node.y > cc.winSize.height / 2 + offsetHeight) || (this.node.y < -cc.winSize.height / 2 - offsetHeight)) {\n            Utils.putPoolNode(this.node, MyGlobal.GameManager.fishPool)\n        }\n    }\n}\n"]}