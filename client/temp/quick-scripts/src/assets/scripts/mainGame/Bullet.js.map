{"version":3,"sources":["assets/scripts/mainGame/Bullet.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import MyGlobal from \"../MyGlobal\";\nimport Utils from \"../Utils\";\nimport Net from \"./Net\";\nimport Fish from \"./Fish\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Bullet extends cc.Component {\n\n    @property(cc.Integer)\n    speed: number = 500;\n\n    // 旋转弧度\n    radian: number = 0;\n\n    // 子弹反弹次数\n    bounceCount: number;\n\n    // 方向\n    direction: number;\n\n    /**\n     * 初始化炮弹\n     * @param angle 炮弹的角度\n     */\n    public init(angle: number): void {\n        this.direction = 1;\n        this.bounceCount = 2;\n\n        this.getComponent(cc.Sprite).spriteFrame = MyGlobal.GameManager.weaponAtlas.getSpriteFrame('bullet' + MyGlobal.weaponLevel);\n        // 角度转弧度\n        this.radian = cc.misc.degreesToRadians(angle);\n        // 把炮台的坐标转换成世界坐标，再转换成局部坐标\n        const worldV2: cc.Vec2 = MyGlobal.GameManager.weapon.parent.convertToWorldSpaceAR(MyGlobal.GameManager.weapon.getPosition());\n        const v2: cc.Vec2 = this.node.parent.convertToNodeSpaceAR(worldV2);\n        // 用三角函数求出目标位置点   角度相反\n        const targetPos: cc.Vec2 = cc.v2(v2.x + 10 * -Math.sin(this.radian), v2.y + 10 * Math.cos(this.radian));\n        this.node.setPosition(targetPos);\n        this.node.angle = angle;\n    }\n\n    /**\n     * 碰撞检测\n     * @param other 其他碰撞组件\n     * @param self 当前碰撞组件\n     */\n    private onCollisionEnter(other: cc.Collider, self: cc.Collider): void {\n        // 如果鱼已经死亡，则不再检测碰撞\n        if (!other.node.getComponent(Fish).isLive) return;\n        Utils.putPoolNode(this.node, MyGlobal.GameManager.bulletPool);\n        const net: cc.Node = Utils.getPoolNode(MyGlobal.GameManager.netPool, MyGlobal.GameManager.netPrefab);\n        net.parent = MyGlobal.GameManager.fishLayer;\n        net.getComponent(Net).init(this.node.getPosition());\n    }\n\n    protected update(dt: number): void {\n        let dx: number = this.node.x;\n        let dy: number = this.node.y;\n\n        // console.log(dx,cc.winSize.width/2)\n        if (this.bounceCount > 0) {\n            if (Math.abs(dx) > cc.winSize.width / 2) {\n                // 如果超出横向屏幕，则旋转他们的角度和弧度\n                this.radian = -this.radian;\n                this.node.angle = -this.node.angle;\n                this.bounceCount--;\n            } else if (dy > cc.winSize.height / 2) {\n                // y轴方向需要旋转180度\n                this.node.angle = 180 - this.node.angle;\n                this.direction = -1;\n                this.bounceCount--;\n            } else if (dy < -cc.winSize.height / 2) {\n                // y轴方向需要旋转180度\n                this.node.angle = 180 - this.node.angle;\n                this.direction = -1;\n                this.bounceCount--;\n            }\n        }\n        dx -= this.speed * dt * Math.sin(this.radian);\n        dy += this.speed * dt * Math.cos(this.radian) * this.direction;\n        this.node.setPosition(cc.v2(dx, dy));\n\n        // 好处屏幕之后回收炮弹\n        if ((Math.abs(dx) - cc.winSize.width / 2 > 100) || (Math.abs(dy) - cc.winSize.height / 2 > 100)) {\n            Utils.putPoolNode(this.node, MyGlobal.GameManager.bulletPool);\n        }\n    }\n\n    // 获取炮弹的伤害\n    public getHurt(): number {\n        let hurt = MyGlobal.weaponLevel * 4;\n        return Math.ceil(Math.random() * hurt + MyGlobal.weaponLevel);\n    }\n}\n"]}